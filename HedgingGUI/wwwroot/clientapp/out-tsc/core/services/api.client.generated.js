/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.4.0 (NJsonSchema v9.12.7.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
export var API_BASE_URL = new InjectionToken('API_BASE_URL');
var AdminService = /** @class */ (function () {
    function AdminService(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8841";
    }
    AdminService.prototype.get = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Admin";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGet(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGet(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    AdminService.prototype.processGet = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? UserListViewModel.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    AdminService = __decorate([
        Injectable(),
        __param(0, Inject(HttpClient)), __param(1, Optional()), __param(1, Inject(API_BASE_URL)),
        __metadata("design:paramtypes", [HttpClient, String])
    ], AdminService);
    return AdminService;
}());
export { AdminService };
var UserListViewModel = /** @class */ (function () {
    function UserListViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserListViewModel.prototype.init = function (data) {
        if (data) {
            if (data["users"] && data["users"].constructor === Array) {
                this.users = [];
                for (var _i = 0, _a = data["users"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.users.push(UserDto.fromJS(item));
                }
            }
        }
    };
    UserListViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserListViewModel();
        result.init(data);
        return result;
    };
    UserListViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.users && this.users.constructor === Array) {
            data["users"] = [];
            for (var _i = 0, _a = this.users; _i < _a.length; _i++) {
                var item = _a[_i];
                data["users"].push(item.toJSON());
            }
        }
        return data;
    };
    return UserListViewModel;
}());
export { UserListViewModel };
var UserDto = /** @class */ (function () {
    function UserDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.lastName = data["lastName"];
            this.firstName = data["firstName"];
            this.team = data["team"];
        }
    };
    UserDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserDto();
        result.init(data);
        return result;
    };
    UserDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["team"] = this.team;
        return data;
    };
    return UserDto;
}());
export { UserDto };
var SwaggerException = /** @class */ (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
export { SwaggerException };
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}
function blobToText(blob) {
    return new Observable(function (observer) {
        if (!blob) {
            observer.next("");
            observer.complete();
        }
        else {
            var reader = new FileReader();
            reader.onload = function (event) {
                observer.next(event.target.result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
//# sourceMappingURL=api.client.generated.js.map